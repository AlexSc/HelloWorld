from Config import *
from Bundle import *
from rez import *
from NixysaBuilder import *

from SCons import Node

Import('env')
Import('libs')

files = Glob('*.cpp')

TOOL_SUBST(env)

MIME_RELEASE = 'application/x-hello-world'
MIME_DEBUG = 'application/x-hello-world-debug'

hellorc_subst = {}
hellorc_subst['dbg'] = {'FILE_DESC':'nphello_debug', 'FILE_OPEN_NAME':'nphello_debug'}
hellorc_subst['dbg'].update({'INTERNAL_NAME':'Hello Debug', 'MIME_TYPE':MIME_DEBUG})
hellorc_subst['dbg'].update({'ORIGINAL_FILE_NAME':'nphello_debug.dll', 'PRODUCT_NAME':'HelloWorld Plugin Debug'})

hellorc_subst['optdbg'] = {'FILE_DESC':'nphello_optimized', 'FILE_OPEN_NAME':'nphello_optimized'}
hellorc_subst['optdbg'].update({'INTERNAL_NAME':'Hello OptDebug', 'MIME_TYPE':MIME_RELEASE})
hellorc_subst['optdbg'].update({'ORIGINAL_FILE_NAME':'nphello_optimized.dll', 'PRODUCT_NAME':'HelloWorld Plugin OptDebug'})

hellorc_subst['release'] = {'FILE_DESC':'nphello', 'FILE_OPEN_NAME':'nphello'}
hellorc_subst['release'].update({'INTERNAL_NAME':'Hello', 'MIME_TYPE':MIME_RELEASE})
hellorc_subst['release'].update({'ORIGINAL_FILE_NAME':'nphello.dll', 'PRODUCT_NAME':'HelloWorld Plugin'})

hellodef_subst = {}
hellodef_subst['dbg'] = {'LIBNAME':'NPHELLO_DEBUG'}
hellodef_subst['optdbg'] = {'LIBNAME':'NPHELLO_OPTIMIZED'}
hellodef_subst['release'] = {'LIBNAME':'NPHELLO'}

infoplist_subst = {}
infoplist_subst['dbg'] = {'MIME_TYPE':MIME_DEBUG}
infoplist_subst['optdbg'] = {'MIME_TYPE':MIME_RELEASE}
infoplist_subst['release'] = {'MIME_TYPE':MIME_RELEASE}

hellor_osx_subst = {}
hellor_osx_subst['dbg'] = {'FILE_DESC':'Hello World Debug Plugin', 'FILE_NAME':'Hello World Debug Plugin'}
hellor_osx_subst['dbg'].update({'MIME_TYPE':MIME_DEBUG, 'MIME_DESC':'Hello World Debug Example'})

hellor_osx_subst['optdbg'] = {'FILE_DESC':'Hello World Optimized Plugin', 'FILE_NAME':'Hello World Optimized Plugin'}
hellor_osx_subst['optdbg'].update({'MIME_TYPE':MIME_RELEASE, 'MIME_DESC':'Hello World Example'})

hellor_osx_subst['release'] = {'FILE_DESC':'Hello World Plugin', 'FILE_NAME':'Hello World Plugin'}
hellor_osx_subst['release'].update({'MIME_TYPE':MIME_RELEASE, 'MIME_DESC':'Hello World Example'})

env.Append(CPPPATH=['../inc', '#/lib', '.'], LIBPATH='#/lib')
isLinux = env['PLATFORM'] == 'posix' or env['PLATFORM'] == 'linux'
isOSX = env['PLATFORM'] == 'darwin'
isWindows = env['PLATFORM'] == 'win32'
cppdefines = []
target = 'Hello'
if isLinux or isOSX:
   cppdefines += ["XP_UNIX", 'MDCPUCFG="\\"prcpucfg_unix.h"\\"']
if isLinux:
	cppdefines += ["OS_LINUX"]
if isOSX:
   cppdefines += ["XP_MACOSX", "OS_MACOSX"]
   env.Append(LINKFLAGS='-framework CoreFoundation')
if isWindows:
   cppdefines += ["WIN32", "OS_WINDOWS", "NOMINMAX", "_WINDOWS", 'MDCPUCFG="\\"prcpucfg_win32.h"\\"']
   f = env.Build('SubstInFile', 'hello.def', 'hello.def.in', copy=False, suffix=False, SUBST_DICT_CFG=hellodef_subst)[0]
   files.append(f)
   f = env.Build('SubstInFile', 'hello.rc', 'hello.rc.in', copy=False, suffix=False, SUBST_DICT_CFG=hellorc_subst)[0]
   files.append(f)
   target = 'nphello'
   
TOOL_NIXYSA(env)
AUTOGEN_OUTPUT = env.Nixysa('hello.idl')
AUTOGEN_CC_FILES = [f for f in AUTOGEN_OUTPUT if f.suffix == '.cc']
files += AUTOGEN_CC_FILES

STATIC_GLUE_SOURCES=['common.cc', 'npn_api.cc', 'static_object.cc', 'main.cc']
files += ['$STATIC_GLUE_DIR/' + f for f in STATIC_GLUE_SOURCES]

cppdefine_cfg = {}
cppdefine_cfg['release'] = cppdefines + ['MIME_TYPE="\\"%s"\\"' % MIME_RELEASE]
cppdefine_cfg['optdbg'] = cppdefines + ['MIME_TYPE="\\"%s"\\"' % MIME_RELEASE]
cppdefine_cfg['dbg'] = cppdefines + ['MIME_TYPE="\\"%s"\\"' % MIME_DEBUG]

ret = env.Build('LoadableModule', target, files, LIBS_CFG=libs[1], CPPDEFINES_CFG=cppdefine_cfg)

if isOSX:
   TOOL_BUNDLE(env)
   TOOL_REZ(env)
   f = env.Build('SubstInFile', 'Info.plist', 'Info.plist.in', copy=False, suffix=False, SUBST_DICT_CFG=infoplist_subst)[0]
   res = env.Build('SubstInFile', 'Hello.r', 'Hello.r.in', copy=False, suffix=False, SUBST_DICT_CFG=hellor_osx_subst)[0]
   rsrc = env.Build('REZ', 'Hello', res, copy=False, suffix=True)[0]
   configs = env.subst('${cfg}').split()
   for config in configs:
      config = Config.allConfigs[config]
      env.MakeBundle('Hello' + config.suffix + '.plugin', 'Hello' + config.suffix,
                     'build/' + config.name + '/Info.plist',
                     typecode='BRPL', creator='????',
                     resources=['English.lproj', rsrc[config.name]])

Return('ret')
