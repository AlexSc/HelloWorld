from SCons.Script import *
from SCons.Script.SConscript import SConsEnvironment

def TOOL_BUNDLE(env):
    """defines env.MakeBundle() for installing a bundle into its dir.
       A bundle has this structure: (filenames are case SENSITIVE)
       sapphire.bundle/
         Contents/
           Info.plist (an XML key->value database)
           MacOS/
             executable (the executable or shared lib)
    Resources/
         """
    if 'BUNDLE' in env['TOOLS']: return
    if env['PLATFORM'] == 'darwin':
        # Common type codes are BNDL for generic bundle and APPL for application.
        def MakeBundle(env, bundledir, app,
                       info_plist,
                       typecode='BNDL', creator='????',
                       resources=[]):
            """Install a bundle into its dir, in the proper format"""
            # Substitute construction vars:
            for a in [bundledir, info_plist, typecode, creator]:
                a = env.subst(a)

            if SCons.Util.is_List(app):
                app = app[0]
            if SCons.Util.is_String(app):
                app = env.subst(app)
                appbase = app
            else:
                appbase = str(app)

            if not ('.' in bundledir):
                bundledir += '.$BUNDLEDIRSUFFIX'

            bundledir = env.subst(bundledir) # substitute again
            Mkdir(bundledir)
            env.Clean(app, bundledir)

            env.Install(bundledir+'/Contents/MacOS', app)
            env.Install(bundledir+'/Contents', info_plist)
            if SCons.Util.is_String(resources):
            	resources = [resources]
            for r in resources:
               t = env.Install(bundledir+'/Contents/Resources', env.subst(r))
               env.Clean(t, t)
            return [ SCons.Node.FS.default_fs.Dir(bundledir) ]
        # This is not a regular Builder; it's a wrapper function.
        # So just make it available as a method of Environment.
        SConsEnvironment.MakeBundle = MakeBundle

SConscript(['../../../scons/Universal'])

env = Environment(CPPPATH=['../../inc', '../../../lib'], LIBPATH='../../../lib')
TOOL_BUNDLE(env)
env.DoUniversal('LoadableModule', 'Hello', 'plugin.cpp', LIBS='hello')

env.MakeBundle('Hello.plugin', 'Hello',
              'Info.plist',
              typecode='BRPL', creator='????',
              resources="English.lproj")

